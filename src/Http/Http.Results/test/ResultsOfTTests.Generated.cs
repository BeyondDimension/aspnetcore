// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// This file is generated by a tool. See: src/Http/Http.Results/tools/ResultsOfTGenerator
namespace Microsoft.AspNetCore.Http.Result;

using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;

public partial class ResultsOfTTests
{
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    public void ResultsOfTResult1TResult2_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                _ => new ChecksumResult2()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    public async Task ResultsOfTResult1TResult2_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                _ => new ChecksumResult2(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    public void ResultsOfTResult1TResult2TResult3_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                _ => new ChecksumResult3()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    public async Task ResultsOfTResult1TResult2TResult3_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                _ => new ChecksumResult3(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    public void ResultsOfTResult1TResult2TResult3TResult4_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                _ => new ChecksumResult4()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                _ => new ChecksumResult4(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                _ => new ChecksumResult5()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                _ => new ChecksumResult5(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                _ => new ChecksumResult6()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                _ => new ChecksumResult6(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                _ => new ChecksumResult7()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                _ => new ChecksumResult7(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    [InlineData(8, typeof(ChecksumResult8))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                7 => new ChecksumResult7(),
                _ => new ChecksumResult8()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    [InlineData(8)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                7 => new ChecksumResult7(checksum),
                _ => new ChecksumResult8(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    [InlineData(8, typeof(ChecksumResult8))]
    [InlineData(9, typeof(ChecksumResult9))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                7 => new ChecksumResult7(),
                8 => new ChecksumResult8(),
                _ => new ChecksumResult9()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    [InlineData(8)]
    [InlineData(9)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                7 => new ChecksumResult7(checksum),
                8 => new ChecksumResult8(checksum),
                _ => new ChecksumResult9(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    [InlineData(8, typeof(ChecksumResult8))]
    [InlineData(9, typeof(ChecksumResult9))]
    [InlineData(10, typeof(ChecksumResult10))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                7 => new ChecksumResult7(),
                8 => new ChecksumResult8(),
                9 => new ChecksumResult9(),
                _ => new ChecksumResult10()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    [InlineData(8)]
    [InlineData(9)]
    [InlineData(10)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                7 => new ChecksumResult7(checksum),
                8 => new ChecksumResult8(checksum),
                9 => new ChecksumResult9(checksum),
                _ => new ChecksumResult10(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    [InlineData(8, typeof(ChecksumResult8))]
    [InlineData(9, typeof(ChecksumResult9))]
    [InlineData(10, typeof(ChecksumResult10))]
    [InlineData(11, typeof(ChecksumResult11))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                7 => new ChecksumResult7(),
                8 => new ChecksumResult8(),
                9 => new ChecksumResult9(),
                10 => new ChecksumResult10(),
                _ => new ChecksumResult11()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    [InlineData(8)]
    [InlineData(9)]
    [InlineData(10)]
    [InlineData(11)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                7 => new ChecksumResult7(checksum),
                8 => new ChecksumResult8(checksum),
                9 => new ChecksumResult9(checksum),
                10 => new ChecksumResult10(checksum),
                _ => new ChecksumResult11(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    [InlineData(8, typeof(ChecksumResult8))]
    [InlineData(9, typeof(ChecksumResult9))]
    [InlineData(10, typeof(ChecksumResult10))]
    [InlineData(11, typeof(ChecksumResult11))]
    [InlineData(12, typeof(ChecksumResult12))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                7 => new ChecksumResult7(),
                8 => new ChecksumResult8(),
                9 => new ChecksumResult9(),
                10 => new ChecksumResult10(),
                11 => new ChecksumResult11(),
                _ => new ChecksumResult12()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    [InlineData(8)]
    [InlineData(9)]
    [InlineData(10)]
    [InlineData(11)]
    [InlineData(12)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                7 => new ChecksumResult7(checksum),
                8 => new ChecksumResult8(checksum),
                9 => new ChecksumResult9(checksum),
                10 => new ChecksumResult10(checksum),
                11 => new ChecksumResult11(checksum),
                _ => new ChecksumResult12(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    [InlineData(8, typeof(ChecksumResult8))]
    [InlineData(9, typeof(ChecksumResult9))]
    [InlineData(10, typeof(ChecksumResult10))]
    [InlineData(11, typeof(ChecksumResult11))]
    [InlineData(12, typeof(ChecksumResult12))]
    [InlineData(13, typeof(ChecksumResult13))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12, ChecksumResult13> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                7 => new ChecksumResult7(),
                8 => new ChecksumResult8(),
                9 => new ChecksumResult9(),
                10 => new ChecksumResult10(),
                11 => new ChecksumResult11(),
                12 => new ChecksumResult12(),
                _ => new ChecksumResult13()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    [InlineData(8)]
    [InlineData(9)]
    [InlineData(10)]
    [InlineData(11)]
    [InlineData(12)]
    [InlineData(13)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12, ChecksumResult13> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                7 => new ChecksumResult7(checksum),
                8 => new ChecksumResult8(checksum),
                9 => new ChecksumResult9(checksum),
                10 => new ChecksumResult10(checksum),
                11 => new ChecksumResult11(checksum),
                12 => new ChecksumResult12(checksum),
                _ => new ChecksumResult13(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    [InlineData(8, typeof(ChecksumResult8))]
    [InlineData(9, typeof(ChecksumResult9))]
    [InlineData(10, typeof(ChecksumResult10))]
    [InlineData(11, typeof(ChecksumResult11))]
    [InlineData(12, typeof(ChecksumResult12))]
    [InlineData(13, typeof(ChecksumResult13))]
    [InlineData(14, typeof(ChecksumResult14))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12, ChecksumResult13, ChecksumResult14> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                7 => new ChecksumResult7(),
                8 => new ChecksumResult8(),
                9 => new ChecksumResult9(),
                10 => new ChecksumResult10(),
                11 => new ChecksumResult11(),
                12 => new ChecksumResult12(),
                13 => new ChecksumResult13(),
                _ => new ChecksumResult14()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    [InlineData(8)]
    [InlineData(9)]
    [InlineData(10)]
    [InlineData(11)]
    [InlineData(12)]
    [InlineData(13)]
    [InlineData(14)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12, ChecksumResult13, ChecksumResult14> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                7 => new ChecksumResult7(checksum),
                8 => new ChecksumResult8(checksum),
                9 => new ChecksumResult9(checksum),
                10 => new ChecksumResult10(checksum),
                11 => new ChecksumResult11(checksum),
                12 => new ChecksumResult12(checksum),
                13 => new ChecksumResult13(checksum),
                _ => new ChecksumResult14(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    [InlineData(8, typeof(ChecksumResult8))]
    [InlineData(9, typeof(ChecksumResult9))]
    [InlineData(10, typeof(ChecksumResult10))]
    [InlineData(11, typeof(ChecksumResult11))]
    [InlineData(12, typeof(ChecksumResult12))]
    [InlineData(13, typeof(ChecksumResult13))]
    [InlineData(14, typeof(ChecksumResult14))]
    [InlineData(15, typeof(ChecksumResult15))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14TResult15_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12, ChecksumResult13, ChecksumResult14, ChecksumResult15> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                7 => new ChecksumResult7(),
                8 => new ChecksumResult8(),
                9 => new ChecksumResult9(),
                10 => new ChecksumResult10(),
                11 => new ChecksumResult11(),
                12 => new ChecksumResult12(),
                13 => new ChecksumResult13(),
                14 => new ChecksumResult14(),
                _ => new ChecksumResult15()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    [InlineData(8)]
    [InlineData(9)]
    [InlineData(10)]
    [InlineData(11)]
    [InlineData(12)]
    [InlineData(13)]
    [InlineData(14)]
    [InlineData(15)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14TResult15_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12, ChecksumResult13, ChecksumResult14, ChecksumResult15> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                7 => new ChecksumResult7(checksum),
                8 => new ChecksumResult8(checksum),
                9 => new ChecksumResult9(checksum),
                10 => new ChecksumResult10(checksum),
                11 => new ChecksumResult11(checksum),
                12 => new ChecksumResult12(checksum),
                13 => new ChecksumResult13(checksum),
                14 => new ChecksumResult14(checksum),
                _ => new ChecksumResult15(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14TResult15_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14TResult15_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Theory]
    [InlineData(1, typeof(ChecksumResult1))]
    [InlineData(2, typeof(ChecksumResult2))]
    [InlineData(3, typeof(ChecksumResult3))]
    [InlineData(4, typeof(ChecksumResult4))]
    [InlineData(5, typeof(ChecksumResult5))]
    [InlineData(6, typeof(ChecksumResult6))]
    [InlineData(7, typeof(ChecksumResult7))]
    [InlineData(8, typeof(ChecksumResult8))]
    [InlineData(9, typeof(ChecksumResult9))]
    [InlineData(10, typeof(ChecksumResult10))]
    [InlineData(11, typeof(ChecksumResult11))]
    [InlineData(12, typeof(ChecksumResult12))]
    [InlineData(13, typeof(ChecksumResult13))]
    [InlineData(14, typeof(ChecksumResult14))]
    [InlineData(15, typeof(ChecksumResult15))]
    [InlineData(16, typeof(ChecksumResult16))]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14TResult15TResult16_Result_IsAssignedResult(int input, Type expectedResult)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12, ChecksumResult13, ChecksumResult14, ChecksumResult15, ChecksumResult16> MyApi(int id)
        {
            return id switch
            {
                1 => new ChecksumResult1(),
                2 => new ChecksumResult2(),
                3 => new ChecksumResult3(),
                4 => new ChecksumResult4(),
                5 => new ChecksumResult5(),
                6 => new ChecksumResult6(),
                7 => new ChecksumResult7(),
                8 => new ChecksumResult8(),
                9 => new ChecksumResult9(),
                10 => new ChecksumResult10(),
                11 => new ChecksumResult11(),
                12 => new ChecksumResult12(),
                13 => new ChecksumResult13(),
                14 => new ChecksumResult14(),
                15 => new ChecksumResult15(),
                _ => new ChecksumResult16()
            };
        }

        // Act
        var result = MyApi(input);

        // Assert
        Assert.IsType(expectedResult, result.Result);
    }

    [Theory]
    [InlineData(1)]
    [InlineData(2)]
    [InlineData(3)]
    [InlineData(4)]
    [InlineData(5)]
    [InlineData(6)]
    [InlineData(7)]
    [InlineData(8)]
    [InlineData(9)]
    [InlineData(10)]
    [InlineData(11)]
    [InlineData(12)]
    [InlineData(13)]
    [InlineData(14)]
    [InlineData(15)]
    [InlineData(16)]
    public async Task ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14TResult15TResult16_ExecuteResult_ExecutesAssignedResult(int input)
    {
        // Arrange
        Results<ChecksumResult1, ChecksumResult2, ChecksumResult3, ChecksumResult4, ChecksumResult5, ChecksumResult6, ChecksumResult7, ChecksumResult8, ChecksumResult9, ChecksumResult10, ChecksumResult11, ChecksumResult12, ChecksumResult13, ChecksumResult14, ChecksumResult15, ChecksumResult16> MyApi(int checksum)
        {
            return checksum switch
            {
                1 => new ChecksumResult1(checksum),
                2 => new ChecksumResult2(checksum),
                3 => new ChecksumResult3(checksum),
                4 => new ChecksumResult4(checksum),
                5 => new ChecksumResult5(checksum),
                6 => new ChecksumResult6(checksum),
                7 => new ChecksumResult7(checksum),
                8 => new ChecksumResult8(checksum),
                9 => new ChecksumResult9(checksum),
                10 => new ChecksumResult10(checksum),
                11 => new ChecksumResult11(checksum),
                12 => new ChecksumResult12(checksum),
                13 => new ChecksumResult13(checksum),
                14 => new ChecksumResult14(checksum),
                15 => new ChecksumResult15(checksum),
                _ => new ChecksumResult16(checksum)
            };
        }
        var httpContext = GetHttpContext();

        // Act
        var result = MyApi(input);
        await result.ExecuteAsync(httpContext);

        // Assert
        Assert.Equal(input, httpContext.Items[result.Result]);
    }

    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14TResult15TResult16_Throws_ArgumentNullException_WhenHttpContextIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        HttpContext httpContext = null;
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<ArgumentNullException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    [Fact]
    public void ResultsOfTResult1TResult2TResult3TResult4TResult5TResult6TResult7TResult8TResult9TResult10TResult11TResult12TResult13TResult14TResult15TResult16_Throws_InvalidOperationException_WhenResultIsNull()
    {
        // Arrange
        Results<ChecksumResult1, NoContentHttpResult> MyApi()
        {
            return new ChecksumResult1(1);
        }
        var httpContext = GetHttpContext();
        
        // Act & Assert
        var result = MyApi();
        
        Assert.ThrowsAsync<InvalidOperationException>(async () =>
        {
            await result.ExecuteAsync(httpContext);
        });
    }
    
    class ChecksumResult : IResult
    {
        public ChecksumResult(int checksum = 0)
        {
            Checksum = checksum;
        }

        public int Checksum { get; }

        public Task ExecuteAsync(HttpContext httpContext)
        {
            httpContext.Items[this] = Checksum;
            return Task.CompletedTask;
        }
    }

    class ChecksumResult1 : ChecksumResult
    {
        public ChecksumResult1(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult2 : ChecksumResult
    {
        public ChecksumResult2(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult3 : ChecksumResult
    {
        public ChecksumResult3(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult4 : ChecksumResult
    {
        public ChecksumResult4(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult5 : ChecksumResult
    {
        public ChecksumResult5(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult6 : ChecksumResult
    {
        public ChecksumResult6(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult7 : ChecksumResult
    {
        public ChecksumResult7(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult8 : ChecksumResult
    {
        public ChecksumResult8(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult9 : ChecksumResult
    {
        public ChecksumResult9(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult10 : ChecksumResult
    {
        public ChecksumResult10(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult11 : ChecksumResult
    {
        public ChecksumResult11(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult12 : ChecksumResult
    {
        public ChecksumResult12(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult13 : ChecksumResult
    {
        public ChecksumResult13(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult14 : ChecksumResult
    {
        public ChecksumResult14(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult15 : ChecksumResult
    {
        public ChecksumResult15(int checksum = 0) : base(checksum) { }
    }

    class ChecksumResult16 : ChecksumResult
    {
        public ChecksumResult16(int checksum = 0) : base(checksum) { }
    }
}
