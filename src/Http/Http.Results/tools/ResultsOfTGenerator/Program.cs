// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System.Text;

var className = "Results";
var typeArgCount = 16;
var typeArgName = "TResult";
var pwd = Directory.GetCurrentDirectory();

GenerateClassFile(Path.Join(pwd, $"{className}OfT.cs"));

Console.WriteLine();

GenerateTestFiles(Path.Join(pwd, $"..{Path.DirectorySeparatorChar}test", $"{className}OfTTests.Generated.cs"));

void GenerateClassFile(string classFilePath)
{
    Console.WriteLine($"Will generate class file at {classFilePath}");
    Console.WriteLine("Press any key to continue or Ctrl-C to cancel");
    Console.ReadKey();

    using var writer = new StreamWriter(classFilePath, append: false);

    // File header
    writer.WriteLine("// Licensed to the .NET Foundation under one or more agreements.");
    writer.WriteLine("// The .NET Foundation licenses this file to you under the MIT license.");
    writer.WriteLine();
    writer.WriteLine("// This file is generated by a tool. See: src/Http/Http.Results/tools/ResultsOfTGenerator");

    // Namespace
    writer.WriteLine("namespace Microsoft.AspNetCore.Http;");
    writer.WriteLine();

    for (int i = 1; i <= typeArgCount; i++)
    {
        // Skip first as we don't have a Results<TResult1> class
        if (i == 1) continue;

        // Class summary doc
        writer.WriteLine("/// <summary>");
        writer.WriteLine($"/// An <see cref=\"IResult\"/> that could be one of {i.ToWords()} different <see cref=\"IResult\"/> types. On execution will");
        writer.WriteLine("/// execute the underlying <see cref=\"IResult\"/> instance that was actually returned by the HTTP endpoint.");
        writer.WriteLine("/// </summary>");

        // Class remarks doc
        writer.WriteLine("/// <remarks>");
        writer.WriteLine("/// An instance of this type cannot be created explicitly. Use the implicit cast operators to create an instance");
        writer.WriteLine("/// from an instance of one of the declared type arguments, e.g.");
        writer.WriteLine("/// <code>Results&lt;OkObjectHttpResult, ProblemHttpResult&gt; result = Results.Ok();</code>");
        writer.WriteLine("/// </remarks>");

        // Type params docs
        for (int j = 1; j <= i; j++)
        {
            writer.WriteLine(@$"/// <typeparam name=""{typeArgName}{j}"">The {j.ToOrdinalWords()} result type.</typeparam>");
        }

        // Class declaration
        writer.Write($"public sealed class {className}<");

        // Type args
        for (int j = 1; j <= i; j++)
        {
            writer.Write($"{typeArgName}{j}");
            if (j != i)
            {
                writer.Write(", ");
            }
        }

        writer.WriteLine("> : IResult");

        // Type arg contraints
        for (int j = 1; j <= i; j++)
        {
            writer.Write($"   where {typeArgName}{j} : IResult");
            if (j != i)
            {
                writer.Write(Environment.NewLine);
            }
        }
        writer.WriteLine();
        writer.WriteLine("{");

        // Ctor
        writer.WriteLine("    // Use implicit cast operators to create an instance");
        writer.WriteLine($"    private {className}(IResult activeResult)");
        writer.WriteLine("    {");
        writer.WriteLine("        Result = activeResult;");
        writer.WriteLine("    }");
        writer.WriteLine();

        // Result property
        writer.WriteLine("    /// <summary>");
        writer.WriteLine($"    /// Gets the actual <see cref=\"IResult\"/> returned by the <see cref=\"Endpoint\"/> route handler delegate.");
        writer.WriteLine("    /// </summary>");
        writer.WriteLine("    public IResult Result { get; }");
        writer.WriteLine();

        // ExecuteAsync method
        writer.WriteLine("    /// <inheritdoc/>");
        writer.WriteLine("    public async Task ExecuteAsync(HttpContext httpContext)");
        writer.WriteLine("    {");
        writer.WriteLine("        ArgumentNullException.ThrowIfNull(httpContext, nameof(httpContext));");
        writer.WriteLine();
        writer.WriteLine("        if (Result is null)");
        writer.WriteLine("        {");
        writer.WriteLine("            throw new InvalidOperationException(\"The IResult assigned to the Result property must not be null.\");");
        writer.WriteLine("        }");
        writer.WriteLine();
        writer.WriteLine("        await Result.ExecuteAsync(httpContext);");
        writer.WriteLine("    }");
        writer.WriteLine();

        // Implicit converter operators
        var sb = new StringBuilder();
        for (int j = 1; j <= i; j++)
        {
            sb.Append($"{typeArgName}{j}");
            if (j != i)
            {
                sb.Append(", ");
            }
        }
        var typeArgsList = sb.ToString();

        for (int j = 1; j <= i; j++)
        {
            writer.WriteLine("    /// <summary>");
            writer.WriteLine($"    /// Converts the <typeparamref name=\"{typeArgName}{j}\"/> to a <see cref=\"{className}{{{typeArgsList}}}\" />.");
            writer.WriteLine("    /// </summary>");
            writer.WriteLine("    /// <param name=\"result\">The result.</param>");
            writer.WriteLine($"    public static implicit operator {className}<{typeArgsList}>({typeArgName}{j} result) => new(result);");

            if (i != j)
            {
                writer.WriteLine();
            }
        }

        // Class end
        writer.WriteLine("}");

        if (i != typeArgCount)
        {
            writer.WriteLine();
        }
    }

    writer.Flush();
    writer.Close();

    var file = new FileInfo(classFilePath);

    if (!file.Exists) throw new FileNotFoundException(classFilePath);

    Console.WriteLine();
    Console.WriteLine($"{file.Length:N0} bytes written to {file.FullName} successfully!");
}

void GenerateTestFiles(string testFilePath)
{
    Console.WriteLine($"Will generate tests file at {testFilePath}");
    Console.WriteLine("Press any key to continue or Ctrl-C to cancel");
    Console.ReadKey();

    using var writer = new StreamWriter(testFilePath, append: false);

    // File header
    writer.WriteLine("// Licensed to the .NET Foundation under one or more agreements.");
    writer.WriteLine("// The .NET Foundation licenses this file to you under the MIT license.");
    writer.WriteLine();
    writer.WriteLine("// This file is generated by a tool. See: src/Http/Http.Results/tools/ResultsOfTGenerator");

    // Namespace
    writer.WriteLine("namespace Microsoft.AspNetCore.Http.Result;");
    writer.WriteLine();

    // Using statements
    writer.WriteLine("using System.Threading.Tasks;");
    writer.WriteLine("using Microsoft.Extensions.DependencyInjection;");
    writer.WriteLine("using Microsoft.Extensions.Logging;");
    writer.WriteLine("using Microsoft.Extensions.Logging.Abstractions;");
    writer.WriteLine();

    // Class declaration
    writer.WriteLine($"public partial class {className}OfTTests");
    writer.WriteLine("{");

    for (int i = 1; i <= typeArgCount; i++)
    {
        // Skip first as we don't have a Results<TResult1> class
        if (i == 1) continue;

        GenerateTest_Result_IsAssignedResult(writer, i);
        GenerateTest_ExecuteResult_ExecutesAssignedResult(writer, i);
        GenerateTest_Throws_ArgumentNullException_WhenHttpContextIsNull(writer, i);
        GenerateTest_Throws_InvalidOperationException_WhenResultIsNull(writer, i);
    }

    Generate_ChecksumResultClass(writer);

    // CustomResult classes
    writer.WriteLine();
    for (int i = 1; i <= typeArgCount; i++)
    {
        Generate_ChecksumResultClass(writer, i);

        if (i != typeArgCount)
        {
            writer.WriteLine();
        }
    }

    // End test class
    writer.WriteLine("}");

    writer.Flush();
    writer.Close();

    var file = new FileInfo(testFilePath);

    if (!file.Exists) throw new FileNotFoundException(testFilePath);

    Console.WriteLine();
    Console.WriteLine($"{file.Length:N0} bytes written to {file.FullName} successfully!");
}

void GenerateTest_Result_IsAssignedResult(StreamWriter writer, int typeArgNumber)
{
    //[Theory]
    //[InlineData(1, typeof(ChecksumResult1))]
    //[InlineData(2, typeof(ChecksumResult2))]
    //public void ResultsOfTResult1TResult2_Result_IsAssignedResult(int input, Type expectedResult)
    //{
    //    // Arrange
    //    Results<CustomResult1, CustomResult2> MyApi(int id)
    //    {
    //        return id switch
    //        {
    //            1 => new CustomResult1(),
    //            _ => new CustomResult2()
    //        };
    //    }

    //    // Act
    //    var result = MyApi(input);

    //    // Assert
    //    Assert.IsType(expectedResult, result.Result);
    //}

    // Attributes
    writer.WriteIndentedLine("[Theory]");

    // InlineData
    for (int j = 1; j <= typeArgNumber; j++)
    {
        writer.WriteIndentedLine($"[InlineData({j}, typeof(ChecksumResult{j}))]");
    }

    // Method
    // public void ResultsOfTResult1TResult2_Result_IsAssignedResult(int input, Type expectedResult)
    writer.WriteIndent(1, "public void ResultsOf");
    for (int j = 1; j <= typeArgNumber; j++)
    {
        writer.Write($"TResult{j}");
    }
    writer.WriteLine("_Result_IsAssignedResult(int input, Type expectedResult)");
    writer.WriteIndentedLine("{");

    // Arrange
    writer.WriteIndentedLine(2, "// Arrange");
    writer.WriteIndent(2, "Results<");
    for (int j = 1; j <= typeArgNumber; j++)
    {
        writer.Write($"ChecksumResult{j}");
        if (typeArgNumber != j)
        {
            writer.Write(", ");
        }
    }
    writer.WriteLine("> MyApi(int id)");
    writer.WriteIndentedLine(2, "{");
    writer.WriteIndentedLine(3, "return id switch");
    writer.WriteIndentedLine(3, "{");
    for (int j = 1; j <= typeArgNumber; j++)
    {
        if (j != typeArgNumber)
        {
            writer.WriteIndentedLine(4, $"{j} => new ChecksumResult{j}(),");
        }
        else
        {
            writer.WriteIndentedLine(4, $"_ => new ChecksumResult{j}()");
        }
    }
    writer.WriteIndentedLine(3, "};");
    writer.WriteIndentedLine(2, "}");
    writer.WriteLine();

    // Act
    writer.WriteIndentedLine(2, "// Act");
    writer.WriteIndentedLine(2, "var result = MyApi(input);");
    writer.WriteLine();

    // Assert
    writer.WriteIndentedLine(2, "// Assert");
    writer.WriteIndentedLine(2, "Assert.IsType(expectedResult, result.Result);");

    // End of method
    writer.WriteIndentedLine("}");
    writer.WriteLine();
}

void GenerateTest_ExecuteResult_ExecutesAssignedResult(StreamWriter writer, int typeArgNumber)
{
    //[Theory]
    //[InlineData(1, 1)]
    //[InlineData(2, 2)]
    //[InlineData(-1, null)]
    //public async Task ResultsOfTResult1TResult2_ExecuteResult_ExecutesAssignedResult(int input, object expected)
    //{
    //    // Arrange
    //    Results<ChecksumResult1, ChecksumResult2, NoContentHttpResult> MyApi(int checksum)
    //    {
    //        return checksum switch
    //        {
    //            1 => new ChecksumResult1(checksum),
    //            2 => new ChecksumResult2(checksum),
    //            _ => (NoContentHttpResult)Results.NoContent()
    //        };
    //    }
    //    var httpContext = GetHttpContext();

    //    // Act
    //    var result = MyApi(input);
    //    await result.ExecuteAsync(httpContext);

    //    // Assert
    //    Assert.Equal(expected, httpContext.Items[result.Result]);
    //}

    // Attributes
    writer.WriteIndentedLine("[Theory]");

    // InlineData
    for (int j = 1; j <= typeArgNumber; j++)
    {
        writer.WriteIndentedLine($"[InlineData({j})]");
    }
    //writer.WriteIndentedLine("[InlineData(-1, null)]");

    // Method
    // public void ResultsOfTResult1TResult2_ExecuteResult_ExecutesAssignedResult(int input, object expected)
    writer.WriteIndent(1, "public async Task ResultsOf");
    for (int j = 1; j <= typeArgNumber; j++)
    {
        writer.Write($"TResult{j}");
    }
    writer.WriteLine("_ExecuteResult_ExecutesAssignedResult(int input)");
    writer.WriteIndentedLine("{");

    // Arrange
    writer.WriteIndentedLine(2, "// Arrange");
    writer.WriteIndent(2, "Results<");
    for (int j = 1; j <= typeArgNumber; j++)
    {
        writer.Write($"ChecksumResult{j}");
        if (typeArgNumber != j)
        {
            writer.Write(", ");
        }
    }
    writer.WriteLine("> MyApi(int checksum)");
    writer.WriteIndentedLine(2, "{");
    writer.WriteIndentedLine(3, "return checksum switch");
    writer.WriteIndentedLine(3, "{");
    for (int j = 1; j <= typeArgNumber; j++)
    {
        if (j < typeArgNumber)
        {
            writer.WriteIndentedLine(4, $"{j} => new ChecksumResult{j}(checksum),");
        }
        else
        {
            writer.WriteIndentedLine(4, $"_ => new ChecksumResult{j}(checksum)");
        }
    }
    //writer.WriteIndentedLine(4, $"_ => (NoContentHttpResult)Results.NoContent()");
    writer.WriteIndentedLine(3, "};");
    writer.WriteIndentedLine(2, "}");
    writer.WriteIndentedLine(2, "var httpContext = GetHttpContext();");
    writer.WriteLine();

    // Act
    writer.WriteIndentedLine(2, "// Act");
    writer.WriteIndentedLine(2, "var result = MyApi(input);");
    writer.WriteIndentedLine(2, "await result.ExecuteAsync(httpContext);");
    writer.WriteLine();

    // Assert
    writer.WriteIndentedLine(2, "// Assert");
    writer.WriteIndentedLine(2, "Assert.Equal(input, httpContext.Items[result.Result]);");

    // End of method
    writer.WriteIndentedLine("}");
    writer.WriteLine();
}

void GenerateTest_Throws_ArgumentNullException_WhenHttpContextIsNull(StreamWriter writer, int typeArgNumber)
{
    //[Fact]
    //public void ResultsOfTResult1TResult2_Throws_ArgumentNullException_WhenHttpContextIsNull()
    //{
    //    // Arrange
    //    Results<ChecksumResult, NoContentHttpResult> MyApi()
    //    {
    //        return new ChecksumResult(1);
    //    }
    //    HttpContext httpContext = null;

    //    // Act & Assert
    //    var result = MyApi();

    //    Assert.ThrowsAsync<ArgumentNullException>(async () =>
    //    {
    //        await result.ExecuteAsync(httpContext);
    //    });
    //}

}

void GenerateTest_Throws_InvalidOperationException_WhenResultIsNull(StreamWriter writer, int typeArgNumber)
{
    //[Fact]
    //public void ResultsOfTResult1TResult2_Throws_InvalidOperationException_WhenResultIsNull()
    //{
    //    // Arrange
    //    Results<ChecksumResult, NoContentHttpResult> MyApi()
    //    {
    //        return (ChecksumResult)null;
    //    }
    //    var httpContext = GetHttpContext();

    //    // Act & Assert
    //    var result = MyApi();

    //    Assert.ThrowsAsync<InvalidOperationException>(async () =>
    //    {
    //        await result.ExecuteAsync(httpContext);
    //    });
    //}

}

void Generate_ChecksumResultClass(StreamWriter writer, int typeArgNumber = -1)
{
    if (typeArgNumber <= 0)
    {
        writer.WriteIndentedLine(1, "class ChecksumResult : IResult");
        writer.WriteIndentedLine(1, "{");
        writer.WriteIndentedLine(2, "public ChecksumResult(int checksum = 0)");
        writer.WriteIndentedLine(2, "{");
        writer.WriteIndentedLine(3, "Checksum = checksum;");
        writer.WriteIndentedLine(2, "}");
        writer.WriteLine();
        writer.WriteIndentedLine(2, "public int Checksum { get; }");
        writer.WriteLine();
        writer.WriteIndentedLine(2, "public Task ExecuteAsync(HttpContext httpContext)");
        writer.WriteIndentedLine(2, "{");
        writer.WriteIndentedLine(3, "httpContext.Items[this] = Checksum;");
        writer.WriteIndentedLine(3, "return Task.CompletedTask;");
        writer.WriteIndentedLine(2, "}");
        writer.WriteIndentedLine(1, "}");
    }
    else
    {
        // ChecksumResult class
        //class ChecksumResult1 : ChecksumResult
        //{
        //    public ChecksumResult1(int checksum = 0) : base(checksum) { }
        //}
        writer.WriteIndentedLine(1, $"class ChecksumResult{typeArgNumber} : ChecksumResult");
        writer.WriteIndentedLine(1, "{");
        writer.WriteIndentedLine(2, $"public ChecksumResult{typeArgNumber}(int checksum = 0) : base(checksum) {{ }}");
        writer.WriteIndentedLine(1, "}");
    }
}

static class StringExtensions
{
    public static void WriteIndent(this StreamWriter writer, string? value = null)
    {
        WriteIndent(writer, 1, value);
    }

    public static void WriteIndent(this StreamWriter writer, int count, string? value = null)
    {
        for (int i = 1; i <= count; i++)
        {
            writer.Write("    ");
        }

        if (value != null)
        {
            writer.Write(value);
        }
    }

    public static void WriteIndentedLine(this StreamWriter writer, string? value = null)
    {
        WriteIndentedLine(writer, 1, value);
    }

    public static void WriteIndentedLine(this StreamWriter writer, int count, string? value = null)
    {
        WriteIndent(writer, count, value);
        writer.WriteLine();
    }

    public static string ToWords(this int number) => number switch
    {
        1 => "one",
        2 => "two",
        3 => "three",
        4 => "four",
        5 => "five",
        6 => "six",
        7 => "seven",
        8 => "eight",
        9 => "nine",
        10 => "ten",
        11 => "eleven",
        12 => "twelve",
        13 => "thirteen",
        14 => "fourteen",
        15 => "fifteen",
        16 => "sixteen",
        17 => "seventeen",
        18 => "eighteen",
        19 => "nineteen",
        20 => "twenty",
        _ => throw new NotImplementedException("Add more numbers")
    };

    public static string ToOrdinalWords(this int number) => number switch
    {
        1 => "first",
        2 => "second",
        3 => "third",
        4 => "fourth",
        5 => "fifth",
        6 => "sixth",
        7 => "seventh",
        8 => "eighth",
        9 => "ninth",
        10 => "tenth",
        11 => "eleventh",
        12 => "twelfth",
        13 => "thirteenth",
        14 => "fourteenth",
        15 => "fifteenth",
        16 => "sixteenth",
        17 => "seventeenth",
        18 => "eighteenth",
        19 => "nineteenth",
        20 => "twentieth",
        _ => throw new NotImplementedException("Add more numbers")
    };
}
